---
theme: cosmo
format: html
editor: source
execute :
  echo: false
  output: true
  warning: false
  error: false
  freeze: auto
  cache: true
code-fold: true
editor_options: 
  chunk_output_type: console
---

```{r load packages}
# clear all 
  rm(list = ls()) 
  rm(list = ls(envir = globalenv()))

# Load packages
pacman::p_load(DBI, RMySQL, tidyverse, rio, here, skimr, lubridate, knitr,
               scales, grid, tidyr, janitor, officer, flextable, ggplot2,
               ggrepel, stringr, patchwork, cowplot, plotly)

options(plotly.renderer = "plotly_mimetype+quarto")

setwd("D:/Documents/12__Projects/01__Project-CS")
```

```{r color palettes}
# color palettes
  blue.6 <-  c("#5C7BE4", "#6383EA","#7192F2","#7FA2F9","#8DAFFC","#9BBBFE")
  palette.17 <- c("#B04873", "#D6598B","#F5669F", blue.6,
                  "#7977A6", "#807EB0", "#8D8BC2", "#9E9BD9","#ABA7E6","#B5B0F2",
                  "#91AB95", "#A4C2A9")
  palette.15 <- c("#BB4D7A", "#FDAF8A", "#FFD1B5", blue.6,
                "#B5B0F2", "#ABA7E6", "#9E9BD9", "#8D8BC2", "#807EB0", "#7977A6")
```


```{r 03 LOAD DATA for barcharts request-per-entity&type}

# ______________________________________________________________________________ 
# 03 LOAD DATA for barcharts request-per-entity&type
# KDT - 2023-12-23
# Functionality : 
# INTRO: LOAD DATA - WRANGLING - CREATE df's for PLOTS AND FLEXTABLES
#   1. fig-barchart-requests-per-entity   << rst_subsidies.requests_per_entity
#   2. fig-barchart-requests-per-subsidy  << rst_subsidies.requests_per_type
# ______________________________________________________________________________

# |1| -- Data wrangling - flt_1/3 - Requests per entity/subsidy

# Import
  # setwd("D:/Documents/12__Projects/01__Project-CS")
  dta_subsidies <- readRDS("Data/Processed Data/subsidies.rds")

# Volgorde van de x-waarden in plots vastleggen >> factors 
  # dataframe aanmaken met naam premies en volgnummer voor ordening
  tmp_vc1 <- c("CHP", "CCP", "COP", "V01", "V02", "V03", "V04", "V05",
              "V06", "V07", "V08", "V09", "V10", "V11", "V12", "GM1", "GM2")
  tmp_vc2 <- seq(1, 17)    
  
# MASTER DATAFRAME rst_subsidies
  # Add number of requests per entity >> nRequests
  
  rst_subsidies <- dta_subsidies  
  rst_subsidies$Subsidy = ordered(rst_subsidies$Subsidy, levels=tmp_vc1)
  rst_subsidies <- rst_subsidies %>% 
  arrange(factor(Subsidy))

  rst_subsidies <- rst_subsidies %>% 
      add_count(EntityNumber, name = "nRequests") 
    
  # Count requests per entity >> nCount_requests  
    rst_requests_count <- rst_subsidies %>% 
      count(nRequests, name = "nCount_requests") 
    
  # Sum Amount per entity >> nSum_entity  
    rst_requests_sum <- rst_subsidies %>%
      group_by(nRequests) %>%
      summarize(nSum_requests = sum(Amount, na.rm = TRUE))
  
  # Average Amount per entity >> nAverage_entity  
    rst_requests_average <- rst_subsidies %>%
      group_by(nRequests) %>%
      summarize(nAverage_requests = mean(Amount, na.rm = TRUE))  
    
  # Count requests per type >> nCount_type
    rst_subsidy_count <- rst_subsidies %>%
      count(Subsidy, name = "nCount_type")
    
  # Sum Amount per type >> nSum_type
    rst_subsidy_sum <- rst_subsidies %>%
      group_by(Subsidy) %>%
      summarize(nSum_type = sum(Amount, na.rm = TRUE))
 
```

```{r 04A barchart requests-per-entity }
#| label: fig-INL-04A-barchart-requests-per-entity
#| eval : false
#| echo: true
#| code-fold: true
#| warning: false
#| fig-width: 8
#| fig-height: 6


# ______________________________________________________________________________
# 04A barchart requests-per-entity -  kdt 2023-12-25
# functionality :
# CREATE BAR CHARTS with request data
#  1. fig-barchart-requests-per-entity   << rst_subsidies.requests_per_entity  
#  2. fig-barchart-requests-per-subsidy  << rst_subsidies.requests_per_type
# ______________________________________________________________________________
  
# [2] -- Create BAR CHARTS -- plt_Subsidies.Requests_per_entity & type

# [2A] bar chart 1 >> plt_subsidies.requests_per_type 
  plt_1a <- ggplot(rst_requests_count, aes(x = nRequests, y = nCount_requests)) +
    geom_bar(stat = "identity", fill = "#5786C9", alpha = 0.95, width = 0.90) +
    geom_text(aes(label = format(round(nCount_requests,0), big.mark = " ")),
               angle = 90, vjust = 0.25, hjust = 1.3, colour = "white", size = 3) +
    ylab("Aantal entiteiten\n") +
    xlab(NULL) +
    scale_y_continuous(
      breaks = seq(0, 350000, by = 10000),
      expand = c(0.01, 0.0),
      labels = scales::label_number(prefix = "", scale = 1e-0, suffix = "", big.mark = " ")) +
    scale_x_continuous(
      breaks = seq(1, 17),
      expand = c(0.01, 0.02),
      labels = scales::label_number(prefix = "", scale = 1e-0, suffix = "", big.mark = " "))+
    scale_color_grey()  + theme_light() +
    theme(axis.text.x = element_text(size = 10),  
          axis.text.y = element_text(size = 10)) + 
    theme(panel.grid.minor.x = element_blank(),
          panel.grid.major.x = element_blank(),
          panel.border = element_blank())

#--------------------------------------
  max_value = round(max(rst_subsidy_sum$nSum_type),0)
  plt_1b <- ggplot(rst_requests_average, aes(x = nRequests, y = nAverage_requests)) +
  geom_bar(stat = "identity", fill = "#5786C9", alpha = 0.95, width = 0.90) +
  geom_text(aes(label = format(round(nAverage_requests,0), big.mark = " ")),
              angle = 90, vjust = 0.25, hjust = 1.3, colour = "white", size = 3.0) +
  ylab("Gemiddeld bedrag toegekende subsidie\n") +
  xlab(NULL) +
  scale_y_continuous(expand = c(0.01, 0.0),
      labels = scales::label_number(prefix = "",
               scale = 1e-0, suffix = "", big.mark = " ")) +
  scale_x_continuous(
      breaks = seq(1, 17),
      expand = c(0, 0.02),
      labels = scales::label_number(prefix = "", scale = 1e-0, suffix = "",
                                    big.mark = " "))+
    scale_color_grey()  + theme_light() +
    theme(axis.text.x = element_text(size = 10),  
          axis.text.y = element_text(size = 10)) + 
    theme(panel.grid.minor.x = element_blank(),
           panel.grid.major.x = element_blank(),
          panel.border = element_blank())

# Combine plots side by side
  plt_1 <- plot_grid(plt_1a, plt_1b, ncol = 2) 

# Add a common title
  space_above_title <- -0.3
  myTitle <- ggdraw() +
  draw_label("Aantal aangevraagde corona premies per entiteit",
             size = 14, x = 0.3, y = 1 + space_above_title)

# Arrange the combined plot and the title
  plt_1 <- plot_grid(myTitle, plt_1, ncol = 1, rel_heights = c(0.1, 1))
    
# Print the combined plot
  plt_1


```

```{r 04B barchart-requests-per-type}
#| label: fig-barchart-requests-per-type
#| results: asis
#| fig-cap: Aantal aanvragen per subsidie
#| fig-cap-location: top

# ______________________________________________________________________________
# INL-04B barchart requests-per-type
# kdt 2023-12-25
# functionality :
# CREATE BAR CHARTS with request data
#   1. fig-barchart-requests-per-entity   << rst_subsidies.requests_per_entity  
#   2. fig-barchart-requests-per-subsidy  << rst_subsidies.requests_per_type
# ______________________________________________________________________________
  
# |2| -- Create BAR CHARTS -- plt_Subsidies.Requests_per_entity & type

# [2-B] bar chart 2 >> plt_subsidies.requests_per_type_Count    
  plt_2a <- ggplot(rst_subsidy_count,
                  aes(x = Subsidy, y = nCount_type, fill = Subsidy)) +
  geom_bar(stat = "identity", alpha = .90, width = 0.90, show.legend = FALSE) +
  geom_text(aes(label = format(round(nCount_type,0), big.mark = " ")),
            angle = 90, vjust = 0.25, hjust = 1.3, colour = "white", size = 3.0,
            fontface = "bold")+
  scale_fill_manual(values = palette.17) +
  ggtitle("Aantal aanvragen (x 1.000) \n") +  
  ylab(NULL) + #"Aantal aanvragen\n") +
  xlab(NULL) + 
  scale_y_continuous(
      breaks = seq(0, 350000, by = 10000),
      expand = c(0.01, 0.0),  # expand = c(0.02,0),
      labels = scales::label_number(prefix = "", scale = 1e-0, suffix = "", big.mark = " ")) +
  scale_color_grey()  + theme_light() +
  theme(axis.text.x = element_text(size = 8),  # Adjust x-axis font size
        axis.text.y = element_text(size = 9),
        panel.grid.minor.x = element_blank(),
        panel.grid.major.x = element_blank(),
        # panel.grid.minor.y = element_blank(),
        panel.border = element_blank(),
        legend.position = "none",)
    
#------------------------------------------------------
# [2-B] bar chart 2 >> plt_subsidies.requests_per_type_Sum     
  
  max_value = max(rst_subsidy_sum$nSum_type) 

  plt_2b <- ggplot(rst_subsidy_sum,
                  aes(x = Subsidy, y = nSum_type, fill = Subsidy)) +
  geom_bar(stat = "identity", alpha = .90, width = 0.90) +
  geom_text(aes(label = format(round(nSum_type/1000000, 0), big.mark = " ")),
            angle = 90, vjust = 0.25, hjust = 1.3, colour = "white", size = 3.0,
            fontface = "bold")+
  scale_fill_manual(values = palette.17) +
  ggtitle("Toegekende bedragen (x 1.000.000) \n") +  
  ylab(NULL) +
  xlab(NULL) +
  scale_y_continuous(
      breaks = seq(0, max_value, by = 50000000),
      expand = c(0.01, 0.0),  # expand = c(0.02,0),
      labels = scales::label_number(prefix = "", scale = 1e-6, suffix = "", big.mark = " ")) +
    scale_color_grey() + theme_light() +
    theme(axis.text.x = element_text(size = 8),  # Adjust x-axis font size
          axis.text.y = element_text(size = 9),
         # panel.grid.major.x = element_blank(),
          panel.grid.minor.x = element_blank(),
          panel.grid.minor.y = element_blank(),
          panel.grid.major.x = element_blank(),
          panel.border = element_blank(),
          legend.position = "none")

# Combine plots side by side
  plt_2 <- plot_grid(plt_2a, plt_2b, ncol = 2)

# Print the combined plot
  plt_2

# # Create plot
#   plt_2 <- plot_ly(
#     data = rst_subsidy,                             
#     x = ~Subsidy,
#     y = ~nCount_type,
#     type = 'bar',
#     hoverinfo = 'none', 
#     color = ~Subsidy,
#     colors = palette.17,
#     opacity= .90,
#     showlegend = FALSE)  %>%
#       layout(autosize = T, margin = list(l=0, r=25, b=40, t=50, pad=0),
#              yaxis = list(title = "<span>Aantal entiteiten <br> </span>",
#                           tickformat = ",d",tickformat = ",d", range = c(0, 60000)), 
#              xaxis = list(title = "Corona subsidie")) %>%
#              #legend = list(title = list(text = '<b>Nace Groep</b>'), y =0.97, x= 1.05))
#       config(displayModeBar = FALSE) # Remove Menu bar on top right op plot
# 
#  plt_2

# Save as html  
  # htmlwidgets::saveWidget(plt_2, file="_images/plt_subsidies_requests_per_type.html", selfcontained = TRUE)
    
  # title = list(text = "<span style='text-align: left;'>Aantal aanvragen</span>", x = 0.0),

  # For interactivity :
  # hovertemplate = 'Entity: %NG: %{x}<br>Total: %{y:,.0f}', 
  # hoverlabel = list(font = list(size = 11, color = ~Subsidy, family = 'Arial', textalign = 'left')),
  # hoverinfo = 'x+y')  
  
  
```

```{r 05 barchart-request-data}
#| label: fig-barchart-with-request-data
#| fig-cap: Bedrag aangevraagde subsidies volgens aantal aanvragen per entiteit per type subsidie
#| fig-cap-location: top
#| results: asis

# ______________________________________________________________________________
# INL-05 barchart request-data
# KDT 2023-12-25
# functionality :
# CREATE BAR CHARTS with request data
# ______________________________________________________________________________
 
# [3] Create BAR CHARTS >> Entities met x aanvragen: welke premie?

# MASTER DATAFRAME rst_subsidies
  # Add number of requests per entity >> nRequests
    rst_sub_exGM <- dta_subsidies
    rst_sub_exGM <-
      rst_sub_exGM [!(rst_sub_exGM$Subsidy =="GM1" | rst_sub_exGM$Subsidy =="GM2"),] %>%
      add_count(EntityNumber, name = "nRequests") 
  
  # Count requests per entity >> nCount_entity  
    rst_entity_ex <- rst_sub_exGM %>% 
      count(nRequests, name = "nCount_entity") 
  
  # Count requests per type >> nCount_type
    rst_subsidy_exGM <- rst_sub_exGM %>%
      count(Subsidy, name = "nCount_type")
  
  # Clean Up
    #rm(dta_subsidies)  


# Create dataframe without subsidies GM1 & GM2  
  # rst_subsidies_exGM <- 
  #   dta_subsidies[!(dta_subsidies$Subsidy =="GM1" | dta_subsidies$Subsidy =="GM1"),]  %>%
  #    add_count(EntityNumber, name = "nRequests") 
  #    add_count(Subsidy) %>%
  #   rename("nRequests" ="n", "nReq_Type" = "nn")

# Make categoricals and sort
  tmp_vc1_exGM <- tmp_vc1[! tmp_vc1 %in% c('GM1', 'GM2')]  # delete GM1 & 2 from vector
  rst_sub_exGM$Subsidy <- ordered(rst_sub_exGM$Subsidy, levels=tmp_vc1_exGM)
  rst_sub_exGM <-rst_sub_exGM  %>%
    arrange(factor(Subsidy))
  
  rst_sub_exGM <- rst_sub_exGM %>%
    mutate(cRequests = as.character(nRequests))
  
# order factors
  rst_sub_exGM <- rst_sub_exGM %>%
     arrange(nRequests)

# Create ggplot
  plt_3 <- ggplot(rst_sub_exGM, aes(x = fct(cRequests), y = Amount, fill = Subsidy)) +
  geom_bar(stat = "identity", alpha = .90, width = .80) +
  # geom_text(aes(label = Amount), vjust = -0.5, size = 3, colour = "grey20") +
  scale_fill_manual(values = palette.17) +
  xlab("Aantal aangevraagde premies per entiteit") +
  ylab("Bedragen \n") + 
  # labs(title="Aantal aanvragen per premies")
  scale_y_continuous(
      breaks = seq(0, 350000000, by = 50000000),
      expand = c(0.03, 0.0),  # expand = c(0.02,0),
      labels = scales::label_number(prefix = "", scale = 1e-0, suffix = "", big.mark = " ")) +
  scale_color_grey() +
  theme_light() +
  theme(axis.text.x = element_text(size = 10),  # Adjust x-axis font size
        axis.text.y = element_text(size = 9),
        panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        panel.border = element_blank())
   
  plt_3
 

# # Create plot
#   plt_3 <- plot_ly(
#     data = rst_sub_exGM,
#     x = ~fct(cRequests),
#     y = ~Amount, 
#     type = 'bar',
#     hoverinfo = 'none',  # Omit hover information
#     color = ~Subsidy,
#     colors = palette.17,
#     opacity = .85) %>%
#     layout(autosize = T, margin = list(l=0, r=25, b=40, t=50, pad=0),
#            yaxis = list(title = "<span>Bedrag ontvangen subsidies <br> </span>", tickformat = ",d"),
#            xaxis = list(title = "Type subsidie"),
#            legend = list(title = list(text = '<b>Subsidie</b>'), y = 0.97, x = 0.97),  
#            barmode = 'stack') %>%  # Set barmode to 'stack' for stacked bars
#     config(displayModeBar = FALSE)  
# 
#   plt_3
#   
# Save as html  
  # htmlwidgets::saveWidget(plt_3, file="_images/plt_subsidies_requests_stacked-bar-chart.html", selfcontained = TRUE)
 
  # title = list(text = "<span style='text-align: left;'>Ontvangen subsidies per subsidie - Stacked Bar Plot</span>", x = 0.05),
  
  # hovertemplate = 'Subsidy: %{x}<br>Total: %{y:,.0f}', 
  # hoverlabel = list(font = list(size = 11, color = ~Subsidy, family = 'Arial', textalign = 'left')),
  # hoverinfo = 'x+y')

  
  
# Clean up
 # rm(list = ls(pattern="(^tmp_|^flt_|^chk_|^plt_|^rst)"))

```

```{r INL-06 boxplot global-by-subsidy}
#| label: fig-boxplot-global-by-subsidy
#| fig-cap: Boxplot van de toegekende coronasubsidies – per subsidie
#| fig-cap-location: top
#| results: asis

# ______________________________________________________________________________
# INL-06 boxplot global-by-subsidy
# KDT - 2024-01-065
# functionality :
# CREATE boxplots with subsidies 
# ______________________________________________________________________________

# import raw data and order
  # tmp_0 <- dta_subsidies
#   rst_subsidies$Subsidy <- ordered(rst_subsidies$Subsidy, levels=tmp_vc1) 
#   rst_subsidies <-rst_subsidies %>%
#     arrange(factor(Subsidy))
# 
#   plt_1 <- ggplot(data = flt_1, mapping = aes(y = Amount, x = Subsidy)) +
#   geom_boxplot(fill="#a1b7e7", alpha = 0.9, color="#84a1e0", outlier.colour="#84a1e0",
#      outlier.size=2, outlier.alpha = 0.7, varwidth = TRUE) +
#   stat_summary(fun=mean, geom="point", shape=23, size=1.5, color ="#E63A6B",  fill="#E63A6B", alpha = 1)+
#   stat_summary(fun=median, geom="point", shape=16, size=1.5, color ="#66DDCC",  fill="#66DDCC", alpha = 1)
#   
#   
# # Create ggplot
#   plt_4 <- ggplot(rst_sub_exGM, aes(x = Subsidy, y = Amount, fill = Subsidy)) +
#   geom_boxplot(alpha = .90, outlier.colour=palette.17, outlier.size=2, outlier.alpha = 0.7, varwidth = FALSE)+ #varwidth = TRUE
#   scale_fill_manual(values = palette.17) + 
#   ylab("Ontvangen subsidies \n log-transformed scale log10") +
#   xlab("Type subsidie") + 
#   # labs(title="Aantal aanvragen per premies")
#   scale_y_continuous(
#       trans = "log10",
#       limits = c(250, 150000),
#       breaks = seq(0, 150000, by = 25000),
#       expand = c(0.02, 0.0),  # expand = c(0.02,0),
#       labels = scales::label_number(prefix = "", scale = 1e-0, suffix = "", big.mark = " ")) +
#   scale_color_grey() +
#   theme_light() +
#   theme(axis.text.x = element_text(size = 10),  # Adjust x-axis font size
#         axis.text.y = element_text(size = 8),
#         #panel.grid.major.x = element_blank(),
#         #panel.grid.minor.x = element_blank(),
#         panel.border = element_blank())
#    
#   plt_4
#   
# plt_4 <- ggplot(rst_sub_exGM, aes(x = Subsidy, y = Amount, fill = Subsidy)) +
#   geom_boxplot(alpha = .90, outlier.shape = NA, varwidth = FALSE) +  #aes(colour = Subsidy)
#   geom_point(aes(color = Subsidy), alpha = 0.7, shape = 2, size = 1) +  
#   scale_fill_manual(values = palette.17) + 
#   scale_color_manual(values = palette.17) +  # Add scale for color aesthetic
#   ylab("Ontvangen subsidies \n log-transformed scale log10") +
#   xlab("Type subsidie") + 
#   scale_y_continuous(
#     trans = "log10",
#     limits = c(250, 150000),
#     breaks = seq(0, 150000, by = 25000),
#     expand = c(0.02, 0.0),
#     labels = scales::label_number(prefix = "", scale = 1e-0, suffix = "", big.mark = " ")
#   ) +
#   theme_light() +
#   theme(
#     axis.text.x = element_text(size = 10),
#     axis.text.y = element_text(size = 8),
#     panel.border = element_blank()
#   )
# 
# plt_4
 

 
plt_4 <- ggplot(rst_sub_exGM, aes(x = Subsidy, y = Amount, fill = Subsidy)) +
  geom_boxplot(alpha = .80, outlier.shape = NA, varwidth = FALSE, width = 0.60, aes(color = Subsidy)) +  
  geom_point(aes(color = Subsidy), alpha = 0.85, shape = 16, size = 1.6) +
  scale_fill_manual(values = palette.17) + 
  scale_color_manual(values = palette.17) +  # Add scale for color aesthetic
  ylab("Ontvangen subsidies \n log-transformed scale log2 \n") +
  xlab("Type subsidie") + 
  scale_y_continuous(
    trans = "log2",
    limits = c(200, 150000),
    breaks = seq(200, 150000, by = 20000),
    expand = c(0.02, 0.0),
    labels = scales::label_number(prefix = "", scale = 1e-0, suffix = "", big.mark = " ")
  ) +
  theme_light() +
  theme(
    axis.text.x = element_text(size = 9),
    axis.text.y = element_text(size = 9),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    panel.border = element_blank()
  )

plt_4

  
  
# # Create plot
#   plt_1 <- plot_ly(
#     data = rst_subsidies,
#     x = ~Subsidy,
#     y = ~Amount,
#     type = 'box',
#     hoverinfo = 'none',  # Omit hover information
#     color = ~Subsidy,
#     colors = palette.17,
#     opacity = 1) %>%
#     layout(autosize = T, margin = list(l=0, r=25, b=40, t=50, pad=0),
#            yaxis = list(title = "<span>Ontvangen subsidies <br> log-transformed scale log10 <br> </span>",tickformat = ",d", type = "log"),
#            xaxis = list(title = "Type subsidie"),
#            legend = list(title = list(text = '<b>Subsidie</b>'), y =0.97, x= 1)) %>%
#            #plot_bgcolor ='#FAFAFA') 
#            config(displayModeBar = FALSE)
#   plt_1
  
# Save as html
  # htmlwidgets::saveWidget(plt_4, file="_images/plt_global_by_subsidy_boxplot.html", selfcontained = TRUE)
  
  # title = list(text = "<span style='text-align: left;'>Ontvangen subsidies per subsidie - Boxplot</span>", x = 0.05),
  
  # For interactivity:
  # hovertemplate = 'Entity: %{text}<br>NG: %{x}<br>Total: %{y:,.0f}', 
  # hoverlabel = list(font = list(size = 11, color = ~Subsidy, family = 'Arial', textalign = 'left')),
  # hoverinfo = 'text+x+y')
  
# Remove Objects 
  # rm(list = ls(pattern="^plt_"))

```


```{r INL-06B boxplot global-by-subsidy-GM}
#| label: fig-boxplot-global-by-subsidy
#| fig-cap: Boxplot van de toegekende coronasubsidies – per subsidie
#| fig-cap-location: top
#| results: asis

# ______________________________________________________________________________
# INL-06B boxplot global-by-subsidy-with GM
# KDT - 2024-01-065
# functionality :
# CREATE boxplots with subsidies 
# ______________________________________________________________________________

# import raw data and order
  # tmp_0 <- dta_subsidies
#   rst_subsidies$Subsidy <- ordered(rst_subsidies$Subsidy, levels=tmp_vc1) 
#   rst_subsidies <-rst_subsidies %>%
#     arrange(factor(Subsidy))
# 
#   plt_1 <- ggplot(data = flt_1, mapping = aes(y = Amount, x = Subsidy)) +
#   geom_boxplot(fill="#a1b7e7", alpha = 0.9, color="#84a1e0", outlier.colour="#84a1e0",
#      outlier.size=2, outlier.alpha = 0.7, varwidth = TRUE) +
#   stat_summary(fun=mean, geom="point", shape=23, size=1.5, color ="#E63A6B",  fill="#E63A6B", alpha = 1)+
#   stat_summary(fun=median, geom="point", shape=16, size=1.5, color ="#66DDCC",  fill="#66DDCC", alpha = 1)
#   
#   
# # Create ggplot
#   plt_4 <- ggplot(rst_sub_exGM, aes(x = Subsidy, y = Amount, fill = Subsidy)) +
#   geom_boxplot(alpha = .90, outlier.colour=palette.17, outlier.size=2, outlier.alpha = 0.7, varwidth = FALSE)+ #varwidth = TRUE
#   scale_fill_manual(values = palette.17) + 
#   ylab("Ontvangen subsidies \n log-transformed scale log10") +
#   xlab("Type subsidie") + 
#   # labs(title="Aantal aanvragen per premies")
#   scale_y_continuous(
#       trans = "log10",
#       limits = c(250, 150000),
#       breaks = seq(0, 150000, by = 25000),
#       expand = c(0.02, 0.0),  # expand = c(0.02,0),
#       labels = scales::label_number(prefix = "", scale = 1e-0, suffix = "", big.mark = " ")) +
#   scale_color_grey() +
#   theme_light() +
#   theme(axis.text.x = element_text(size = 10),  # Adjust x-axis font size
#         axis.text.y = element_text(size = 8),
#         #panel.grid.major.x = element_blank(),
#         #panel.grid.minor.x = element_blank(),
#         panel.border = element_blank())
#    
#   plt_4
#   
# plt_4 <- ggplot(rst_sub_exGM, aes(x = Subsidy, y = Amount, fill = Subsidy)) +
#   geom_boxplot(alpha = .90, outlier.shape = NA, varwidth = FALSE) +  #aes(colour = Subsidy)
#   geom_point(aes(color = Subsidy), alpha = 0.7, shape = 2, size = 1) +  
#   scale_fill_manual(values = palette.17) + 
#   scale_color_manual(values = palette.17) +  # Add scale for color aesthetic
#   ylab("Ontvangen subsidies \n log-transformed scale log10") +
#   xlab("Type subsidie") + 
#   scale_y_continuous(
#     trans = "log10",
#     limits = c(250, 150000),
#     breaks = seq(0, 150000, by = 25000),
#     expand = c(0.02, 0.0),
#     labels = scales::label_number(prefix = "", scale = 1e-0, suffix = "", big.mark = " ")
#   ) +
#   theme_light() +
#   theme(
#     axis.text.x = element_text(size = 10),
#     axis.text.y = element_text(size = 8),
#     panel.border = element_blank()
#   )
# 
# plt_4
 
rst_subsidies$Subsidy <- ordered(rst_subsidies$Subsidy, levels=tmp_vc1) 
rst_subsidies <-rst_subsidies %>%
     arrange(factor(Subsidy))

max_val = max(rst_subsidies$Amount)

plt_5 <- ggplot(rst_subsidies, aes(x = Subsidy, y = Amount, fill = Subsidy)) +
  geom_boxplot(alpha = .80, outlier.shape = NA, varwidth = FALSE, width = 0.50, aes(color = Subsidy)) +  
  geom_point(aes(color = Subsidy), alpha = 0.85, shape = 16, size = 1.6) +
  scale_fill_manual(values = palette.17) + 
  scale_color_manual(values = palette.17) +  # Add scale for color aesthetic
  ylab("Ontvangen subsidies \n log-transformed scale log10 \n") +
  xlab(" \n Type subsidie") + 
  scale_y_log10(
    breaks = 500 * 2^seq(0, 12, by = 1),
    limits = c(100, 2048000),
    expand = c(0.02, 0.0),
    labels = scales::label_number(prefix = "", scale = 1e-0, suffix = "", big.mark = " ")
  ) +
  theme_light() +
  theme(
    axis.text.x = element_text(size = 9),
    axis.text.y = element_text(size = 9),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    # panel.grid.minor.y = element_blank(),
    panel.border = element_blank())

plt_5

  
  
# # Create plot
#   plt_1 <- plot_ly(
#     data = rst_subsidies,
#     x = ~Subsidy,
#     y = ~Amount,
#     type = 'box',
#     hoverinfo = 'none',  # Omit hover information
#     color = ~Subsidy,
#     colors = palette.17,
#     opacity = 1) %>%
#     layout(autosize = T, margin = list(l=0, r=25, b=40, t=50, pad=0),
#            yaxis = list(title = "<span>Ontvangen subsidies <br> log-transformed scale log10 <br> </span>",tickformat = ",d", type = "log"),
#            xaxis = list(title = "Type subsidie"),
#            legend = list(title = list(text = '<b>Subsidie</b>'), y =0.97, x= 1)) %>%
#            #plot_bgcolor ='#FAFAFA') 
#            config(displayModeBar = FALSE)
#   plt_1
  
# Save as html
  # htmlwidgets::saveWidget(plt_4, file="_images/plt_global_by_subsidy_boxplot.html", selfcontained = TRUE)
  
  # title = list(text = "<span style='text-align: left;'>Ontvangen subsidies per subsidie - Boxplot</span>", x = 0.05),
  
  # For interactivity:
  # hovertemplate = 'Entity: %{text}<br>NG: %{x}<br>Total: %{y:,.0f}', 
  # hoverlabel = list(font = list(size = 11, color = ~Subsidy, family = 'Arial', textalign = 'left')),
  # hoverinfo = 'text+x+y')
  
# Remove Objects 
  # rm(list = ls(pattern="^plt_"))

```
